1.  topic
    由生产者发布主题, topic 可以分区, 一个partition是一个有序的不可变消息序列
    每一个message在对应的partition中有一个UID(offset)

2.  Broker
    一个kafka集群由一个或多个server组成, 一个server上运行着一个或多个进程(Broker)
    会保存数据
    无状态, 不会保存message的消费信息

3.  Zookeeper
    负责协调Consumer和Broker
4.  Producer
    发布消息
5.  Consumer
    从topic中订阅消息

6.  启动Kafka集群
    启动Zookeeper集群   ./zkServer.sh start
    启动kafka Server(Broker, 一般一个properties文件对应一个broker)    bin/kafka-server-start.sh config/server.properties
    创建一个Topic       bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1\
                       --partitions 1 --topic kafkaTopic
    查看创建的kafka list     bin/kafka-topics.sh --list --zookeeper localhost:2181
    创建一个producer    bin/kafka-console-producer.sh --broker-list localhost:9092 --topic Kafkatopic
    创建一个consumer    bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic Kafkatopic
7.  生产环境下一个broker对应一个物理机

8.  partition
    一个partition对应一个log文件
    有序不可变的消息序列
    message发布到指定topic的一个partition中, 被加入一个segmect文件, 当message数量或者时间到达特定值, 所有的segment文件会flush到磁盘,然后对消费者可见
    消息由offset表示唯一性,可以通过指定replication保证容错
    一个partition由一个leader保持活跃, 由0-num个follower, leader负责partition的读写工作, follower通过异步方式备份leader中的数据
    如果leader failure, 会有一个follower自动切换为leader

9.  consumer groups
    message 在一个group中只能由一个consumer消费, 但是可以被不同的group中的consumer消费
